- username + password are passed in plain text; improvement: ask a random number to the server
  and make hash of passwd+rand_nb, then, pass this as password

- check if temporal connect per call vs permanent connect is faster

- finish commenting list hosts

- change names to all commands to splay_*
DONE
- remove add_splayd
DONE
- add

- list_available_splayds
DONE

- support options in header of files, command-line overwrites them

VALERIO
- using "lua splay-list-splayds.lua" with ANY url reports the message:  
No active session at the moment. Please start a session with splay-start-session before attempting a command
 instead, this command (and all the others probably) should first that the given URL is valid, well-formed and that there is a running rpc_server at the address
ANSWER: SOLVED
- starting a session using admin/admin returns this message on the client side:
Result not OK in response from http://10.0.2.6:2222/json-rpc
  the rpc_server shows this:
10.0.2.10 - - [13/Jan/2011:11:20:38 CET] "POST /json-rpc HTTP/1.1" 200 81
- -> /json-rpc

- lua splay-start-session.lua http://10.0.2.6:2222/json-rpc : doesn't check correct nb. of arguments. For instance:
lua splay-start-session.lua valerio valerio
Username:
valerio
Password:

USERNAME         = valerio
RPC SERVER URL   = valerio

Sending command to valerio...

No response from server valerio
ANSWER: in fact, no command checks for number of arguments when they exceed the required amount, but when they are not enough, it throws an error
---
- list-splayds.lua could also print how many are available/busy/etc, as a 1 line-report before the long list.
ANSWER: - i just reproduced splayweb's functionality; i think this is a good suggestion for another release
- submit-job should not accept a job if the nb of splayds is not >=1. Instead, it allows me to do the following:
ANSWER: on the server side, any value <1 is silently replaced by 1... to warn the user that he's putting <1 is another good idea for future releases.
lua splay-submit-job.lua -n 0 sample.lua http://10.0.2.6:2222/json-rpc 
CODE_FILE        = sample.lua
NB_SPLAYDS       = 0
OPTIONS          = 
SESSION_ID       = fb5cc49d62edcd14b0ea868ad4d5a4d9902f020c
RPC SERVER URL   = http://10.0.2.6:2222/json-rpc

Sending command to http://10.0.2.6:2222/json-rpc...

Response from http://10.0.2.6:2222/json-rpc:
Job Submitted:
JOB_ID           = 2
REF              = 85ca66484d6ccf4d321f05faaa47d43d

- the command splay-add-user do not explain to the user why a given user can-t be created. In this example, the reason is that
  it already exists a user with this name, but no reason is given to the user:
ANSWER: i did it on purpose; it is a common practice in authentication/authorization not to say why the process went wrong, because it can give hints to strangers about the existing users/passwords
lua splay-new-user.lua -U admin -P admin -u valerio -p valerio http://10.0.2.6:2222/json-rpc 
ADMIN USERNAME   = admin
NEW USERNAME     = valerio
RPC SERVER URL   = http://10.0.2.6:2222/json-rpc

Sending command to http://10.0.2.6:2222/json-rpc...

Response from http://10.0.2.6:2222/json-rpc:
User not added

- the command splay-remove-user do not explain why a user can-t be removed (and i don't know either..):
lua splay-remove-user.lua -U admin -P admin -u valerio http://10.0.2.6:2222/json-rpc 
USERNAME         = valerio
RPC SERVER URL   = http://10.0.2.6:2222/json-rpc
ADMIN USERNAME   = admin

Sending command to http://10.0.2.6:2222/json-rpc...

Response from http://10.0.2.6:2222/json-rpc:
User not removed
ANSWER: same as new-user
-- the command kill-job seems to accept ANY job_id, not only valid ids:
./splay-kill-job.lua some-random-id http://10.0.2.6:2222/json-rpc 
JOB_ID     = some-random-id
SESSION_ID = fb5cc49d62edcd14b0ea868ad4d5a4d9902f020c
RPC SERVER URL   = http://10.0.2.6:2222/json-rpc

Sending command to http://10.0.2.6:2222/json-rpc...

Response from http://10.0.2.6:2222/json-rpc:
JOB some-random-id successfully killed

-- the command kill-job can be executed multiple times with teh same parameters. The first time kills, the second time what does it do ?
ANSWER: this command reproduces the functionality of the CLI kill-job, which doesn't do it either, but i could check on the server side if the job is running... i think is a good suggestion, and maybe a good one for THIS release.
--

get_log should check first if the job is on the DB, before looking for it on the files
DONE

- splay-kill-job to accept a list of job IDs (comma-separated or space-separated for example)
